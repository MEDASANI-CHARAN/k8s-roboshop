apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf # a lowercase RFC 1123 subdomain must consist of lower case alphanumeric characters, '-' or '.', and must start and end with an alphanumeric character (e.g. 'example.com', regex used for validation is '[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*')
  namespace: roboshop
  labels:
    component: frontend
    project: roboshop_top-level
    tier: app-frontend
data:
  nginx.conf: | 
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log notice;
    pid /run/nginx.pid;

    include /usr/share/nginx/modules/*.conf;

    events {
        worker_connections 1024;
    }

    http {
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile            on;
        tcp_nopush          on;
        keepalive_timeout   65;
        types_hash_max_size 4096;

        include             /etc/nginx/mime.types;
        default_type        application/octet-stream;

        include /etc/nginx/conf.d/*.conf;

        server {
            listen       8080;
            # listen       [::]:80;
            server_name  _;
            root         /usr/share/nginx/html;

            include /etc/nginx/default.d/*.conf;

            error_page 404 /404.html;
            location = /404.html {
            }

            error_page 500 502 503 504 /50x.html;
            location = /50x.html {
            }

            location /images/ {
              expires 5s;
              root   /usr/share/nginx/html;
              try_files $uri /images/placeholder.jpg;
            }
            location /api/catalogue/ { proxy_pass http://catalogue-service:8080/; }
            location /api/user/ { proxy_pass http://user-service:8080/; }
            location /api/cart/ { proxy_pass http://cart-service:8080/; }
            location /api/shipping/ { proxy_pass http://shipping-service:8080/; }
            location /api/payment/ { proxy_pass http://payment-service:8080/; }

            location /health {
              stub_status on;
              access_log off;
            }

        }
    }

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: roboshop
  # deployment labels, these belong to the deployment itself, not the Pods.
  labels:
    component: frontend
    project: roboshop_top-level
    tier: web-frontend
    # These labels identify and organize the ReplicaSet resource itself.
    # Used by users or tools to filter ReplicaSets, search, and group resources. (e.g., kubectl get all -l project=roboshop_top-level (or) kubectl get rs -l project=roboshop_top-level).
    # Not used by ReplicaSet controller to create or manage Pods.
spec:
  replicas: 1
  selector:
    matchLabels: # Tells ReplicaSet which Pods to manage
      component: frontend
      project: roboshop
      tier: web-frontend
      # These labels define which Pods the ReplicaSet should watch and manage.
      # If any Pod in the cluster matches these labels, the ReplicaSet counts them toward its replica count.
      # This selector must exactly match the template labels so the RS can manage the Pods it creates.
  template:
    metadata: # Labels for the Pods it creates
      labels: 
        component: frontend
        project: roboshop
        tier: web-frontend
        # These labels are web-frontendlied to new Pods created by the ReplicaSet.
        # They should match the selector labels so the ReplicaSet can identify and manage these Pods.
        # If they donâ€™t match, the RS will never associate with the Pods it creates, causing errors or orphan Pods.
    spec:
      containers:
      - name: frontend
        image: charan466/frontend:v1
        volumeMounts:
        - name: nginx-conf
          mountPath: /etc/nginx/nginx.conf        # target path inside container
          subPath: nginx.conf                      # key in ConfigMap
          readOnly: true
      volumes:
        - name: nginx-conf
          configMap:
            name: nginx-conf
            items:
              - key: nginx-conf
                path: nginx-conf


---

apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: roboshop
  labels:
    component: frontend-svc
    project: roboshop-svc
    tier: web-frontend-svc
spec:
  type: LoadBalancer
  selector:
    component: frontend
    project: roboshop
    tier: web-frontend
  ports: 
    - protocol: TCP
      port: 80 # service port
      targetPort: 8080 # container port

